
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  username: string
  email: string
  usertype: string
  password: string
  shift: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model UserTest
 * 
 */
export type UserTest = {
  id: string
  policeId: string
  email: string
  lastName: string
  firstName: string
  middleName: string
  QLFR: string | null
  station: string
  rank: string
  usertype: string
  password: string
  shift: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Data
 * 
 */
export type Data = {
  id: string
  Gtype: string
  Gname: string
  caliber: string
  serialN: string
  acquisition: string
  turnOver: string
  returned: string
  cost: number
  station: string
  rank: string
  lastName: string
  firstName: string
  middleName: string
  QLFR: string
  qrCode: Buffer | null
}

/**
 * Model Gun_Details
 * 
 */
export type Gun_Details = {
  id: string
  Gtype: string
  Gname: string
  caliber: string
  serialN: string
  acquisition: string
  turnOver: string
  returned: string
  cost: number
  station: string
  rank: string
  lastName: string
  firstName: string
  middleName: string
  QLFR: string
  qrCode: Buffer | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userTest`: Exposes CRUD operations for the **UserTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTests
    * const userTests = await prisma.userTest.findMany()
    * ```
    */
  get userTest(): Prisma.UserTestDelegate<GlobalReject>;

  /**
   * `prisma.data`: Exposes CRUD operations for the **Data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Data
    * const data = await prisma.data.findMany()
    * ```
    */
  get data(): Prisma.DataDelegate<GlobalReject>;

  /**
   * `prisma.gun_Details`: Exposes CRUD operations for the **Gun_Details** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gun_Details
    * const gun_Details = await prisma.gun_Details.findMany()
    * ```
    */
  get gun_Details(): Prisma.Gun_DetailsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.0
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserTest: 'UserTest',
    Data: 'Data',
    Gun_Details: 'Gun_Details'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    shift: number | null
  }

  export type UserSumAggregateOutputType = {
    shift: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    usertype: string | null
    password: string | null
    shift: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    usertype: string | null
    password: string | null
    shift: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    usertype: number
    password: number
    shift: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    shift?: true
  }

  export type UserSumAggregateInputType = {
    shift?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    usertype?: true
    password?: true
    shift?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    usertype?: true
    password?: true
    shift?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    usertype?: true
    password?: true
    shift?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    usertype: string
    password: string
    shift: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    usertype?: boolean
    password?: boolean
    shift?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
  }



  /**
   * Model UserTest
   */


  export type AggregateUserTest = {
    _count: UserTestCountAggregateOutputType | null
    _avg: UserTestAvgAggregateOutputType | null
    _sum: UserTestSumAggregateOutputType | null
    _min: UserTestMinAggregateOutputType | null
    _max: UserTestMaxAggregateOutputType | null
  }

  export type UserTestAvgAggregateOutputType = {
    shift: number | null
  }

  export type UserTestSumAggregateOutputType = {
    shift: number | null
  }

  export type UserTestMinAggregateOutputType = {
    id: string | null
    policeId: string | null
    email: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    QLFR: string | null
    station: string | null
    rank: string | null
    usertype: string | null
    password: string | null
    shift: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTestMaxAggregateOutputType = {
    id: string | null
    policeId: string | null
    email: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    QLFR: string | null
    station: string | null
    rank: string | null
    usertype: string | null
    password: string | null
    shift: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTestCountAggregateOutputType = {
    id: number
    policeId: number
    email: number
    lastName: number
    firstName: number
    middleName: number
    QLFR: number
    station: number
    rank: number
    usertype: number
    password: number
    shift: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTestAvgAggregateInputType = {
    shift?: true
  }

  export type UserTestSumAggregateInputType = {
    shift?: true
  }

  export type UserTestMinAggregateInputType = {
    id?: true
    policeId?: true
    email?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    station?: true
    rank?: true
    usertype?: true
    password?: true
    shift?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTestMaxAggregateInputType = {
    id?: true
    policeId?: true
    email?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    station?: true
    rank?: true
    usertype?: true
    password?: true
    shift?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTestCountAggregateInputType = {
    id?: true
    policeId?: true
    email?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    station?: true
    rank?: true
    usertype?: true
    password?: true
    shift?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTestAggregateArgs = {
    /**
     * Filter which UserTest to aggregate.
     */
    where?: UserTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTests to fetch.
     */
    orderBy?: Enumerable<UserTestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTests
    **/
    _count?: true | UserTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTestMaxAggregateInputType
  }

  export type GetUserTestAggregateType<T extends UserTestAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTest[P]>
      : GetScalarType<T[P], AggregateUserTest[P]>
  }




  export type UserTestGroupByArgs = {
    where?: UserTestWhereInput
    orderBy?: Enumerable<UserTestOrderByWithAggregationInput>
    by: UserTestScalarFieldEnum[]
    having?: UserTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTestCountAggregateInputType | true
    _avg?: UserTestAvgAggregateInputType
    _sum?: UserTestSumAggregateInputType
    _min?: UserTestMinAggregateInputType
    _max?: UserTestMaxAggregateInputType
  }


  export type UserTestGroupByOutputType = {
    id: string
    policeId: string
    email: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string | null
    station: string
    rank: string
    usertype: string
    password: string
    shift: number
    createdAt: Date
    updatedAt: Date
    _count: UserTestCountAggregateOutputType | null
    _avg: UserTestAvgAggregateOutputType | null
    _sum: UserTestSumAggregateOutputType | null
    _min: UserTestMinAggregateOutputType | null
    _max: UserTestMaxAggregateOutputType | null
  }

  type GetUserTestGroupByPayload<T extends UserTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTestGroupByOutputType[P]>
            : GetScalarType<T[P], UserTestGroupByOutputType[P]>
        }
      >
    >


  export type UserTestSelect = {
    id?: boolean
    policeId?: boolean
    email?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    QLFR?: boolean
    station?: boolean
    rank?: boolean
    usertype?: boolean
    password?: boolean
    shift?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type UserTestGetPayload<S extends boolean | null | undefined | UserTestArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserTest :
    S extends undefined ? never :
    S extends { include: any } & (UserTestArgs | UserTestFindManyArgs)
    ? UserTest 
    : S extends { select: any } & (UserTestArgs | UserTestFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserTest ? UserTest[P] : never
  } 
      : UserTest


  type UserTestCountArgs = 
    Omit<UserTestFindManyArgs, 'select' | 'include'> & {
      select?: UserTestCountAggregateInputType | true
    }

  export interface UserTestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one UserTest that matches the filter.
     * @param {UserTestFindUniqueArgs} args - Arguments to find a UserTest
     * @example
     * // Get one UserTest
     * const userTest = await prisma.userTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserTestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserTestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserTest'> extends True ? Prisma__UserTestClient<UserTestGetPayload<T>> : Prisma__UserTestClient<UserTestGetPayload<T> | null, null>

    /**
     * Find one UserTest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserTestFindUniqueOrThrowArgs} args - Arguments to find a UserTest
     * @example
     * // Get one UserTest
     * const userTest = await prisma.userTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserTestFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserTestFindUniqueOrThrowArgs>
    ): Prisma__UserTestClient<UserTestGetPayload<T>>

    /**
     * Find the first UserTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestFindFirstArgs} args - Arguments to find a UserTest
     * @example
     * // Get one UserTest
     * const userTest = await prisma.userTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserTestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserTestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserTest'> extends True ? Prisma__UserTestClient<UserTestGetPayload<T>> : Prisma__UserTestClient<UserTestGetPayload<T> | null, null>

    /**
     * Find the first UserTest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestFindFirstOrThrowArgs} args - Arguments to find a UserTest
     * @example
     * // Get one UserTest
     * const userTest = await prisma.userTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserTestFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserTestFindFirstOrThrowArgs>
    ): Prisma__UserTestClient<UserTestGetPayload<T>>

    /**
     * Find zero or more UserTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTests
     * const userTests = await prisma.userTest.findMany()
     * 
     * // Get first 10 UserTests
     * const userTests = await prisma.userTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTestWithIdOnly = await prisma.userTest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserTestFindManyArgs>(
      args?: SelectSubset<T, UserTestFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserTestGetPayload<T>>>

    /**
     * Create a UserTest.
     * @param {UserTestCreateArgs} args - Arguments to create a UserTest.
     * @example
     * // Create one UserTest
     * const UserTest = await prisma.userTest.create({
     *   data: {
     *     // ... data to create a UserTest
     *   }
     * })
     * 
    **/
    create<T extends UserTestCreateArgs>(
      args: SelectSubset<T, UserTestCreateArgs>
    ): Prisma__UserTestClient<UserTestGetPayload<T>>

    /**
     * Create many UserTests.
     *     @param {UserTestCreateManyArgs} args - Arguments to create many UserTests.
     *     @example
     *     // Create many UserTests
     *     const userTest = await prisma.userTest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserTestCreateManyArgs>(
      args?: SelectSubset<T, UserTestCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserTest.
     * @param {UserTestDeleteArgs} args - Arguments to delete one UserTest.
     * @example
     * // Delete one UserTest
     * const UserTest = await prisma.userTest.delete({
     *   where: {
     *     // ... filter to delete one UserTest
     *   }
     * })
     * 
    **/
    delete<T extends UserTestDeleteArgs>(
      args: SelectSubset<T, UserTestDeleteArgs>
    ): Prisma__UserTestClient<UserTestGetPayload<T>>

    /**
     * Update one UserTest.
     * @param {UserTestUpdateArgs} args - Arguments to update one UserTest.
     * @example
     * // Update one UserTest
     * const userTest = await prisma.userTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserTestUpdateArgs>(
      args: SelectSubset<T, UserTestUpdateArgs>
    ): Prisma__UserTestClient<UserTestGetPayload<T>>

    /**
     * Delete zero or more UserTests.
     * @param {UserTestDeleteManyArgs} args - Arguments to filter UserTests to delete.
     * @example
     * // Delete a few UserTests
     * const { count } = await prisma.userTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserTestDeleteManyArgs>(
      args?: SelectSubset<T, UserTestDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTests
     * const userTest = await prisma.userTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserTestUpdateManyArgs>(
      args: SelectSubset<T, UserTestUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserTest.
     * @param {UserTestUpsertArgs} args - Arguments to update or create a UserTest.
     * @example
     * // Update or create a UserTest
     * const userTest = await prisma.userTest.upsert({
     *   create: {
     *     // ... data to create a UserTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTest we want to update
     *   }
     * })
    **/
    upsert<T extends UserTestUpsertArgs>(
      args: SelectSubset<T, UserTestUpsertArgs>
    ): Prisma__UserTestClient<UserTestGetPayload<T>>

    /**
     * Find zero or more UserTests that matches the filter.
     * @param {UserTestFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userTest = await prisma.userTest.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserTestFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserTest.
     * @param {UserTestAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userTest = await prisma.userTest.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserTestAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of UserTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestCountArgs} args - Arguments to filter UserTests to count.
     * @example
     * // Count the number of UserTests
     * const count = await prisma.userTest.count({
     *   where: {
     *     // ... the filter for the UserTests we want to count
     *   }
     * })
    **/
    count<T extends UserTestCountArgs>(
      args?: Subset<T, UserTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTestAggregateArgs>(args: Subset<T, UserTestAggregateArgs>): Prisma.PrismaPromise<GetUserTestAggregateType<T>>

    /**
     * Group by UserTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTestGroupByArgs['orderBy'] }
        : { orderBy?: UserTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserTestClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserTest base type for findUnique actions
   */
  export type UserTestFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * Filter, which UserTest to fetch.
     */
    where: UserTestWhereUniqueInput
  }

  /**
   * UserTest findUnique
   */
  export interface UserTestFindUniqueArgs extends UserTestFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserTest findUniqueOrThrow
   */
  export type UserTestFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * Filter, which UserTest to fetch.
     */
    where: UserTestWhereUniqueInput
  }


  /**
   * UserTest base type for findFirst actions
   */
  export type UserTestFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * Filter, which UserTest to fetch.
     */
    where?: UserTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTests to fetch.
     */
    orderBy?: Enumerable<UserTestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTests.
     */
    cursor?: UserTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTests.
     */
    distinct?: Enumerable<UserTestScalarFieldEnum>
  }

  /**
   * UserTest findFirst
   */
  export interface UserTestFindFirstArgs extends UserTestFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserTest findFirstOrThrow
   */
  export type UserTestFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * Filter, which UserTest to fetch.
     */
    where?: UserTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTests to fetch.
     */
    orderBy?: Enumerable<UserTestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTests.
     */
    cursor?: UserTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTests.
     */
    distinct?: Enumerable<UserTestScalarFieldEnum>
  }


  /**
   * UserTest findMany
   */
  export type UserTestFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * Filter, which UserTests to fetch.
     */
    where?: UserTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTests to fetch.
     */
    orderBy?: Enumerable<UserTestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTests.
     */
    cursor?: UserTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTests.
     */
    skip?: number
    distinct?: Enumerable<UserTestScalarFieldEnum>
  }


  /**
   * UserTest create
   */
  export type UserTestCreateArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * The data needed to create a UserTest.
     */
    data: XOR<UserTestCreateInput, UserTestUncheckedCreateInput>
  }


  /**
   * UserTest createMany
   */
  export type UserTestCreateManyArgs = {
    /**
     * The data used to create many UserTests.
     */
    data: Enumerable<UserTestCreateManyInput>
  }


  /**
   * UserTest update
   */
  export type UserTestUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * The data needed to update a UserTest.
     */
    data: XOR<UserTestUpdateInput, UserTestUncheckedUpdateInput>
    /**
     * Choose, which UserTest to update.
     */
    where: UserTestWhereUniqueInput
  }


  /**
   * UserTest updateMany
   */
  export type UserTestUpdateManyArgs = {
    /**
     * The data used to update UserTests.
     */
    data: XOR<UserTestUpdateManyMutationInput, UserTestUncheckedUpdateManyInput>
    /**
     * Filter which UserTests to update
     */
    where?: UserTestWhereInput
  }


  /**
   * UserTest upsert
   */
  export type UserTestUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * The filter to search for the UserTest to update in case it exists.
     */
    where: UserTestWhereUniqueInput
    /**
     * In case the UserTest found by the `where` argument doesn't exist, create a new UserTest with this data.
     */
    create: XOR<UserTestCreateInput, UserTestUncheckedCreateInput>
    /**
     * In case the UserTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTestUpdateInput, UserTestUncheckedUpdateInput>
  }


  /**
   * UserTest delete
   */
  export type UserTestDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
    /**
     * Filter which UserTest to delete.
     */
    where: UserTestWhereUniqueInput
  }


  /**
   * UserTest deleteMany
   */
  export type UserTestDeleteManyArgs = {
    /**
     * Filter which UserTests to delete
     */
    where?: UserTestWhereInput
  }


  /**
   * UserTest findRaw
   */
  export type UserTestFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * UserTest aggregateRaw
   */
  export type UserTestAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * UserTest without action
   */
  export type UserTestArgs = {
    /**
     * Select specific fields to fetch from the UserTest
     */
    select?: UserTestSelect | null
  }



  /**
   * Model Data
   */


  export type AggregateData = {
    _count: DataCountAggregateOutputType | null
    _avg: DataAvgAggregateOutputType | null
    _sum: DataSumAggregateOutputType | null
    _min: DataMinAggregateOutputType | null
    _max: DataMaxAggregateOutputType | null
  }

  export type DataAvgAggregateOutputType = {
    cost: number | null
  }

  export type DataSumAggregateOutputType = {
    cost: number | null
  }

  export type DataMinAggregateOutputType = {
    id: string | null
    Gtype: string | null
    Gname: string | null
    caliber: string | null
    serialN: string | null
    acquisition: string | null
    turnOver: string | null
    returned: string | null
    cost: number | null
    station: string | null
    rank: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    QLFR: string | null
    qrCode: Buffer | null
  }

  export type DataMaxAggregateOutputType = {
    id: string | null
    Gtype: string | null
    Gname: string | null
    caliber: string | null
    serialN: string | null
    acquisition: string | null
    turnOver: string | null
    returned: string | null
    cost: number | null
    station: string | null
    rank: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    QLFR: string | null
    qrCode: Buffer | null
  }

  export type DataCountAggregateOutputType = {
    id: number
    Gtype: number
    Gname: number
    caliber: number
    serialN: number
    acquisition: number
    turnOver: number
    returned: number
    cost: number
    station: number
    rank: number
    lastName: number
    firstName: number
    middleName: number
    QLFR: number
    qrCode: number
    _all: number
  }


  export type DataAvgAggregateInputType = {
    cost?: true
  }

  export type DataSumAggregateInputType = {
    cost?: true
  }

  export type DataMinAggregateInputType = {
    id?: true
    Gtype?: true
    Gname?: true
    caliber?: true
    serialN?: true
    acquisition?: true
    turnOver?: true
    returned?: true
    cost?: true
    station?: true
    rank?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    qrCode?: true
  }

  export type DataMaxAggregateInputType = {
    id?: true
    Gtype?: true
    Gname?: true
    caliber?: true
    serialN?: true
    acquisition?: true
    turnOver?: true
    returned?: true
    cost?: true
    station?: true
    rank?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    qrCode?: true
  }

  export type DataCountAggregateInputType = {
    id?: true
    Gtype?: true
    Gname?: true
    caliber?: true
    serialN?: true
    acquisition?: true
    turnOver?: true
    returned?: true
    cost?: true
    station?: true
    rank?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    qrCode?: true
    _all?: true
  }

  export type DataAggregateArgs = {
    /**
     * Filter which Data to aggregate.
     */
    where?: DataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Data to fetch.
     */
    orderBy?: Enumerable<DataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Data
    **/
    _count?: true | DataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataMaxAggregateInputType
  }

  export type GetDataAggregateType<T extends DataAggregateArgs> = {
        [P in keyof T & keyof AggregateData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateData[P]>
      : GetScalarType<T[P], AggregateData[P]>
  }




  export type DataGroupByArgs = {
    where?: DataWhereInput
    orderBy?: Enumerable<DataOrderByWithAggregationInput>
    by: DataScalarFieldEnum[]
    having?: DataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataCountAggregateInputType | true
    _avg?: DataAvgAggregateInputType
    _sum?: DataSumAggregateInputType
    _min?: DataMinAggregateInputType
    _max?: DataMaxAggregateInputType
  }


  export type DataGroupByOutputType = {
    id: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode: Buffer | null
    _count: DataCountAggregateOutputType | null
    _avg: DataAvgAggregateOutputType | null
    _sum: DataSumAggregateOutputType | null
    _min: DataMinAggregateOutputType | null
    _max: DataMaxAggregateOutputType | null
  }

  type GetDataGroupByPayload<T extends DataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataGroupByOutputType[P]>
            : GetScalarType<T[P], DataGroupByOutputType[P]>
        }
      >
    >


  export type DataSelect = {
    id?: boolean
    Gtype?: boolean
    Gname?: boolean
    caliber?: boolean
    serialN?: boolean
    acquisition?: boolean
    turnOver?: boolean
    returned?: boolean
    cost?: boolean
    station?: boolean
    rank?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    QLFR?: boolean
    qrCode?: boolean
  }


  export type DataGetPayload<S extends boolean | null | undefined | DataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Data :
    S extends undefined ? never :
    S extends { include: any } & (DataArgs | DataFindManyArgs)
    ? Data 
    : S extends { select: any } & (DataArgs | DataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Data ? Data[P] : never
  } 
      : Data


  type DataCountArgs = 
    Omit<DataFindManyArgs, 'select' | 'include'> & {
      select?: DataCountAggregateInputType | true
    }

  export interface DataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Data that matches the filter.
     * @param {DataFindUniqueArgs} args - Arguments to find a Data
     * @example
     * // Get one Data
     * const data = await prisma.data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Data'> extends True ? Prisma__DataClient<DataGetPayload<T>> : Prisma__DataClient<DataGetPayload<T> | null, null>

    /**
     * Find one Data that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DataFindUniqueOrThrowArgs} args - Arguments to find a Data
     * @example
     * // Get one Data
     * const data = await prisma.data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DataFindUniqueOrThrowArgs>
    ): Prisma__DataClient<DataGetPayload<T>>

    /**
     * Find the first Data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataFindFirstArgs} args - Arguments to find a Data
     * @example
     * // Get one Data
     * const data = await prisma.data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Data'> extends True ? Prisma__DataClient<DataGetPayload<T>> : Prisma__DataClient<DataGetPayload<T> | null, null>

    /**
     * Find the first Data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataFindFirstOrThrowArgs} args - Arguments to find a Data
     * @example
     * // Get one Data
     * const data = await prisma.data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DataFindFirstOrThrowArgs>
    ): Prisma__DataClient<DataGetPayload<T>>

    /**
     * Find zero or more Data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Data
     * const data = await prisma.data.findMany()
     * 
     * // Get first 10 Data
     * const data = await prisma.data.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataWithIdOnly = await prisma.data.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DataFindManyArgs>(
      args?: SelectSubset<T, DataFindManyArgs>
    ): Prisma.PrismaPromise<Array<DataGetPayload<T>>>

    /**
     * Create a Data.
     * @param {DataCreateArgs} args - Arguments to create a Data.
     * @example
     * // Create one Data
     * const Data = await prisma.data.create({
     *   data: {
     *     // ... data to create a Data
     *   }
     * })
     * 
    **/
    create<T extends DataCreateArgs>(
      args: SelectSubset<T, DataCreateArgs>
    ): Prisma__DataClient<DataGetPayload<T>>

    /**
     * Create many Data.
     *     @param {DataCreateManyArgs} args - Arguments to create many Data.
     *     @example
     *     // Create many Data
     *     const data = await prisma.data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DataCreateManyArgs>(
      args?: SelectSubset<T, DataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Data.
     * @param {DataDeleteArgs} args - Arguments to delete one Data.
     * @example
     * // Delete one Data
     * const Data = await prisma.data.delete({
     *   where: {
     *     // ... filter to delete one Data
     *   }
     * })
     * 
    **/
    delete<T extends DataDeleteArgs>(
      args: SelectSubset<T, DataDeleteArgs>
    ): Prisma__DataClient<DataGetPayload<T>>

    /**
     * Update one Data.
     * @param {DataUpdateArgs} args - Arguments to update one Data.
     * @example
     * // Update one Data
     * const data = await prisma.data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DataUpdateArgs>(
      args: SelectSubset<T, DataUpdateArgs>
    ): Prisma__DataClient<DataGetPayload<T>>

    /**
     * Delete zero or more Data.
     * @param {DataDeleteManyArgs} args - Arguments to filter Data to delete.
     * @example
     * // Delete a few Data
     * const { count } = await prisma.data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DataDeleteManyArgs>(
      args?: SelectSubset<T, DataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Data
     * const data = await prisma.data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DataUpdateManyArgs>(
      args: SelectSubset<T, DataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Data.
     * @param {DataUpsertArgs} args - Arguments to update or create a Data.
     * @example
     * // Update or create a Data
     * const data = await prisma.data.upsert({
     *   create: {
     *     // ... data to create a Data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Data we want to update
     *   }
     * })
    **/
    upsert<T extends DataUpsertArgs>(
      args: SelectSubset<T, DataUpsertArgs>
    ): Prisma__DataClient<DataGetPayload<T>>

    /**
     * Find zero or more Data that matches the filter.
     * @param {DataFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const data = await prisma.data.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: DataFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Data.
     * @param {DataAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const data = await prisma.data.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: DataAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataCountArgs} args - Arguments to filter Data to count.
     * @example
     * // Count the number of Data
     * const count = await prisma.data.count({
     *   where: {
     *     // ... the filter for the Data we want to count
     *   }
     * })
    **/
    count<T extends DataCountArgs>(
      args?: Subset<T, DataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataAggregateArgs>(args: Subset<T, DataAggregateArgs>): Prisma.PrismaPromise<GetDataAggregateType<T>>

    /**
     * Group by Data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataGroupByArgs['orderBy'] }
        : { orderBy?: DataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Data base type for findUnique actions
   */
  export type DataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * Filter, which Data to fetch.
     */
    where: DataWhereUniqueInput
  }

  /**
   * Data findUnique
   */
  export interface DataFindUniqueArgs extends DataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Data findUniqueOrThrow
   */
  export type DataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * Filter, which Data to fetch.
     */
    where: DataWhereUniqueInput
  }


  /**
   * Data base type for findFirst actions
   */
  export type DataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * Filter, which Data to fetch.
     */
    where?: DataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Data to fetch.
     */
    orderBy?: Enumerable<DataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Data.
     */
    cursor?: DataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Data.
     */
    distinct?: Enumerable<DataScalarFieldEnum>
  }

  /**
   * Data findFirst
   */
  export interface DataFindFirstArgs extends DataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Data findFirstOrThrow
   */
  export type DataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * Filter, which Data to fetch.
     */
    where?: DataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Data to fetch.
     */
    orderBy?: Enumerable<DataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Data.
     */
    cursor?: DataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Data.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Data.
     */
    distinct?: Enumerable<DataScalarFieldEnum>
  }


  /**
   * Data findMany
   */
  export type DataFindManyArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * Filter, which Data to fetch.
     */
    where?: DataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Data to fetch.
     */
    orderBy?: Enumerable<DataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Data.
     */
    cursor?: DataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Data from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Data.
     */
    skip?: number
    distinct?: Enumerable<DataScalarFieldEnum>
  }


  /**
   * Data create
   */
  export type DataCreateArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * The data needed to create a Data.
     */
    data: XOR<DataCreateInput, DataUncheckedCreateInput>
  }


  /**
   * Data createMany
   */
  export type DataCreateManyArgs = {
    /**
     * The data used to create many Data.
     */
    data: Enumerable<DataCreateManyInput>
  }


  /**
   * Data update
   */
  export type DataUpdateArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * The data needed to update a Data.
     */
    data: XOR<DataUpdateInput, DataUncheckedUpdateInput>
    /**
     * Choose, which Data to update.
     */
    where: DataWhereUniqueInput
  }


  /**
   * Data updateMany
   */
  export type DataUpdateManyArgs = {
    /**
     * The data used to update Data.
     */
    data: XOR<DataUpdateManyMutationInput, DataUncheckedUpdateManyInput>
    /**
     * Filter which Data to update
     */
    where?: DataWhereInput
  }


  /**
   * Data upsert
   */
  export type DataUpsertArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * The filter to search for the Data to update in case it exists.
     */
    where: DataWhereUniqueInput
    /**
     * In case the Data found by the `where` argument doesn't exist, create a new Data with this data.
     */
    create: XOR<DataCreateInput, DataUncheckedCreateInput>
    /**
     * In case the Data was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataUpdateInput, DataUncheckedUpdateInput>
  }


  /**
   * Data delete
   */
  export type DataDeleteArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
    /**
     * Filter which Data to delete.
     */
    where: DataWhereUniqueInput
  }


  /**
   * Data deleteMany
   */
  export type DataDeleteManyArgs = {
    /**
     * Filter which Data to delete
     */
    where?: DataWhereInput
  }


  /**
   * Data findRaw
   */
  export type DataFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Data aggregateRaw
   */
  export type DataAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Data without action
   */
  export type DataArgs = {
    /**
     * Select specific fields to fetch from the Data
     */
    select?: DataSelect | null
  }



  /**
   * Model Gun_Details
   */


  export type AggregateGun_Details = {
    _count: Gun_DetailsCountAggregateOutputType | null
    _avg: Gun_DetailsAvgAggregateOutputType | null
    _sum: Gun_DetailsSumAggregateOutputType | null
    _min: Gun_DetailsMinAggregateOutputType | null
    _max: Gun_DetailsMaxAggregateOutputType | null
  }

  export type Gun_DetailsAvgAggregateOutputType = {
    cost: number | null
  }

  export type Gun_DetailsSumAggregateOutputType = {
    cost: number | null
  }

  export type Gun_DetailsMinAggregateOutputType = {
    id: string | null
    Gtype: string | null
    Gname: string | null
    caliber: string | null
    serialN: string | null
    acquisition: string | null
    turnOver: string | null
    returned: string | null
    cost: number | null
    station: string | null
    rank: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    QLFR: string | null
    qrCode: Buffer | null
  }

  export type Gun_DetailsMaxAggregateOutputType = {
    id: string | null
    Gtype: string | null
    Gname: string | null
    caliber: string | null
    serialN: string | null
    acquisition: string | null
    turnOver: string | null
    returned: string | null
    cost: number | null
    station: string | null
    rank: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    QLFR: string | null
    qrCode: Buffer | null
  }

  export type Gun_DetailsCountAggregateOutputType = {
    id: number
    Gtype: number
    Gname: number
    caliber: number
    serialN: number
    acquisition: number
    turnOver: number
    returned: number
    cost: number
    station: number
    rank: number
    lastName: number
    firstName: number
    middleName: number
    QLFR: number
    qrCode: number
    _all: number
  }


  export type Gun_DetailsAvgAggregateInputType = {
    cost?: true
  }

  export type Gun_DetailsSumAggregateInputType = {
    cost?: true
  }

  export type Gun_DetailsMinAggregateInputType = {
    id?: true
    Gtype?: true
    Gname?: true
    caliber?: true
    serialN?: true
    acquisition?: true
    turnOver?: true
    returned?: true
    cost?: true
    station?: true
    rank?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    qrCode?: true
  }

  export type Gun_DetailsMaxAggregateInputType = {
    id?: true
    Gtype?: true
    Gname?: true
    caliber?: true
    serialN?: true
    acquisition?: true
    turnOver?: true
    returned?: true
    cost?: true
    station?: true
    rank?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    qrCode?: true
  }

  export type Gun_DetailsCountAggregateInputType = {
    id?: true
    Gtype?: true
    Gname?: true
    caliber?: true
    serialN?: true
    acquisition?: true
    turnOver?: true
    returned?: true
    cost?: true
    station?: true
    rank?: true
    lastName?: true
    firstName?: true
    middleName?: true
    QLFR?: true
    qrCode?: true
    _all?: true
  }

  export type Gun_DetailsAggregateArgs = {
    /**
     * Filter which Gun_Details to aggregate.
     */
    where?: Gun_DetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gun_Details to fetch.
     */
    orderBy?: Enumerable<Gun_DetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Gun_DetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gun_Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gun_Details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gun_Details
    **/
    _count?: true | Gun_DetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Gun_DetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Gun_DetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Gun_DetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Gun_DetailsMaxAggregateInputType
  }

  export type GetGun_DetailsAggregateType<T extends Gun_DetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateGun_Details]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGun_Details[P]>
      : GetScalarType<T[P], AggregateGun_Details[P]>
  }




  export type Gun_DetailsGroupByArgs = {
    where?: Gun_DetailsWhereInput
    orderBy?: Enumerable<Gun_DetailsOrderByWithAggregationInput>
    by: Gun_DetailsScalarFieldEnum[]
    having?: Gun_DetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Gun_DetailsCountAggregateInputType | true
    _avg?: Gun_DetailsAvgAggregateInputType
    _sum?: Gun_DetailsSumAggregateInputType
    _min?: Gun_DetailsMinAggregateInputType
    _max?: Gun_DetailsMaxAggregateInputType
  }


  export type Gun_DetailsGroupByOutputType = {
    id: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode: Buffer | null
    _count: Gun_DetailsCountAggregateOutputType | null
    _avg: Gun_DetailsAvgAggregateOutputType | null
    _sum: Gun_DetailsSumAggregateOutputType | null
    _min: Gun_DetailsMinAggregateOutputType | null
    _max: Gun_DetailsMaxAggregateOutputType | null
  }

  type GetGun_DetailsGroupByPayload<T extends Gun_DetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Gun_DetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Gun_DetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Gun_DetailsGroupByOutputType[P]>
            : GetScalarType<T[P], Gun_DetailsGroupByOutputType[P]>
        }
      >
    >


  export type Gun_DetailsSelect = {
    id?: boolean
    Gtype?: boolean
    Gname?: boolean
    caliber?: boolean
    serialN?: boolean
    acquisition?: boolean
    turnOver?: boolean
    returned?: boolean
    cost?: boolean
    station?: boolean
    rank?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    QLFR?: boolean
    qrCode?: boolean
  }


  export type Gun_DetailsGetPayload<S extends boolean | null | undefined | Gun_DetailsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Gun_Details :
    S extends undefined ? never :
    S extends { include: any } & (Gun_DetailsArgs | Gun_DetailsFindManyArgs)
    ? Gun_Details 
    : S extends { select: any } & (Gun_DetailsArgs | Gun_DetailsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Gun_Details ? Gun_Details[P] : never
  } 
      : Gun_Details


  type Gun_DetailsCountArgs = 
    Omit<Gun_DetailsFindManyArgs, 'select' | 'include'> & {
      select?: Gun_DetailsCountAggregateInputType | true
    }

  export interface Gun_DetailsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Gun_Details that matches the filter.
     * @param {Gun_DetailsFindUniqueArgs} args - Arguments to find a Gun_Details
     * @example
     * // Get one Gun_Details
     * const gun_Details = await prisma.gun_Details.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Gun_DetailsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Gun_DetailsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Gun_Details'> extends True ? Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>> : Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T> | null, null>

    /**
     * Find one Gun_Details that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Gun_DetailsFindUniqueOrThrowArgs} args - Arguments to find a Gun_Details
     * @example
     * // Get one Gun_Details
     * const gun_Details = await prisma.gun_Details.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Gun_DetailsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Gun_DetailsFindUniqueOrThrowArgs>
    ): Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>>

    /**
     * Find the first Gun_Details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gun_DetailsFindFirstArgs} args - Arguments to find a Gun_Details
     * @example
     * // Get one Gun_Details
     * const gun_Details = await prisma.gun_Details.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Gun_DetailsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Gun_DetailsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Gun_Details'> extends True ? Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>> : Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T> | null, null>

    /**
     * Find the first Gun_Details that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gun_DetailsFindFirstOrThrowArgs} args - Arguments to find a Gun_Details
     * @example
     * // Get one Gun_Details
     * const gun_Details = await prisma.gun_Details.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Gun_DetailsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Gun_DetailsFindFirstOrThrowArgs>
    ): Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>>

    /**
     * Find zero or more Gun_Details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gun_DetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gun_Details
     * const gun_Details = await prisma.gun_Details.findMany()
     * 
     * // Get first 10 Gun_Details
     * const gun_Details = await prisma.gun_Details.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gun_DetailsWithIdOnly = await prisma.gun_Details.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Gun_DetailsFindManyArgs>(
      args?: SelectSubset<T, Gun_DetailsFindManyArgs>
    ): Prisma.PrismaPromise<Array<Gun_DetailsGetPayload<T>>>

    /**
     * Create a Gun_Details.
     * @param {Gun_DetailsCreateArgs} args - Arguments to create a Gun_Details.
     * @example
     * // Create one Gun_Details
     * const Gun_Details = await prisma.gun_Details.create({
     *   data: {
     *     // ... data to create a Gun_Details
     *   }
     * })
     * 
    **/
    create<T extends Gun_DetailsCreateArgs>(
      args: SelectSubset<T, Gun_DetailsCreateArgs>
    ): Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>>

    /**
     * Create many Gun_Details.
     *     @param {Gun_DetailsCreateManyArgs} args - Arguments to create many Gun_Details.
     *     @example
     *     // Create many Gun_Details
     *     const gun_Details = await prisma.gun_Details.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Gun_DetailsCreateManyArgs>(
      args?: SelectSubset<T, Gun_DetailsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Gun_Details.
     * @param {Gun_DetailsDeleteArgs} args - Arguments to delete one Gun_Details.
     * @example
     * // Delete one Gun_Details
     * const Gun_Details = await prisma.gun_Details.delete({
     *   where: {
     *     // ... filter to delete one Gun_Details
     *   }
     * })
     * 
    **/
    delete<T extends Gun_DetailsDeleteArgs>(
      args: SelectSubset<T, Gun_DetailsDeleteArgs>
    ): Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>>

    /**
     * Update one Gun_Details.
     * @param {Gun_DetailsUpdateArgs} args - Arguments to update one Gun_Details.
     * @example
     * // Update one Gun_Details
     * const gun_Details = await prisma.gun_Details.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Gun_DetailsUpdateArgs>(
      args: SelectSubset<T, Gun_DetailsUpdateArgs>
    ): Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>>

    /**
     * Delete zero or more Gun_Details.
     * @param {Gun_DetailsDeleteManyArgs} args - Arguments to filter Gun_Details to delete.
     * @example
     * // Delete a few Gun_Details
     * const { count } = await prisma.gun_Details.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Gun_DetailsDeleteManyArgs>(
      args?: SelectSubset<T, Gun_DetailsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gun_Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gun_DetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gun_Details
     * const gun_Details = await prisma.gun_Details.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Gun_DetailsUpdateManyArgs>(
      args: SelectSubset<T, Gun_DetailsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gun_Details.
     * @param {Gun_DetailsUpsertArgs} args - Arguments to update or create a Gun_Details.
     * @example
     * // Update or create a Gun_Details
     * const gun_Details = await prisma.gun_Details.upsert({
     *   create: {
     *     // ... data to create a Gun_Details
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gun_Details we want to update
     *   }
     * })
    **/
    upsert<T extends Gun_DetailsUpsertArgs>(
      args: SelectSubset<T, Gun_DetailsUpsertArgs>
    ): Prisma__Gun_DetailsClient<Gun_DetailsGetPayload<T>>

    /**
     * Find zero or more Gun_Details that matches the filter.
     * @param {Gun_DetailsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const gun_Details = await prisma.gun_Details.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: Gun_DetailsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Gun_Details.
     * @param {Gun_DetailsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const gun_Details = await prisma.gun_Details.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: Gun_DetailsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Gun_Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gun_DetailsCountArgs} args - Arguments to filter Gun_Details to count.
     * @example
     * // Count the number of Gun_Details
     * const count = await prisma.gun_Details.count({
     *   where: {
     *     // ... the filter for the Gun_Details we want to count
     *   }
     * })
    **/
    count<T extends Gun_DetailsCountArgs>(
      args?: Subset<T, Gun_DetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Gun_DetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gun_Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gun_DetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Gun_DetailsAggregateArgs>(args: Subset<T, Gun_DetailsAggregateArgs>): Prisma.PrismaPromise<GetGun_DetailsAggregateType<T>>

    /**
     * Group by Gun_Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gun_DetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Gun_DetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Gun_DetailsGroupByArgs['orderBy'] }
        : { orderBy?: Gun_DetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Gun_DetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGun_DetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Gun_Details.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Gun_DetailsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Gun_Details base type for findUnique actions
   */
  export type Gun_DetailsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * Filter, which Gun_Details to fetch.
     */
    where: Gun_DetailsWhereUniqueInput
  }

  /**
   * Gun_Details findUnique
   */
  export interface Gun_DetailsFindUniqueArgs extends Gun_DetailsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Gun_Details findUniqueOrThrow
   */
  export type Gun_DetailsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * Filter, which Gun_Details to fetch.
     */
    where: Gun_DetailsWhereUniqueInput
  }


  /**
   * Gun_Details base type for findFirst actions
   */
  export type Gun_DetailsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * Filter, which Gun_Details to fetch.
     */
    where?: Gun_DetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gun_Details to fetch.
     */
    orderBy?: Enumerable<Gun_DetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gun_Details.
     */
    cursor?: Gun_DetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gun_Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gun_Details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gun_Details.
     */
    distinct?: Enumerable<Gun_DetailsScalarFieldEnum>
  }

  /**
   * Gun_Details findFirst
   */
  export interface Gun_DetailsFindFirstArgs extends Gun_DetailsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Gun_Details findFirstOrThrow
   */
  export type Gun_DetailsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * Filter, which Gun_Details to fetch.
     */
    where?: Gun_DetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gun_Details to fetch.
     */
    orderBy?: Enumerable<Gun_DetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gun_Details.
     */
    cursor?: Gun_DetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gun_Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gun_Details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gun_Details.
     */
    distinct?: Enumerable<Gun_DetailsScalarFieldEnum>
  }


  /**
   * Gun_Details findMany
   */
  export type Gun_DetailsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * Filter, which Gun_Details to fetch.
     */
    where?: Gun_DetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gun_Details to fetch.
     */
    orderBy?: Enumerable<Gun_DetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gun_Details.
     */
    cursor?: Gun_DetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gun_Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gun_Details.
     */
    skip?: number
    distinct?: Enumerable<Gun_DetailsScalarFieldEnum>
  }


  /**
   * Gun_Details create
   */
  export type Gun_DetailsCreateArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * The data needed to create a Gun_Details.
     */
    data: XOR<Gun_DetailsCreateInput, Gun_DetailsUncheckedCreateInput>
  }


  /**
   * Gun_Details createMany
   */
  export type Gun_DetailsCreateManyArgs = {
    /**
     * The data used to create many Gun_Details.
     */
    data: Enumerable<Gun_DetailsCreateManyInput>
  }


  /**
   * Gun_Details update
   */
  export type Gun_DetailsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * The data needed to update a Gun_Details.
     */
    data: XOR<Gun_DetailsUpdateInput, Gun_DetailsUncheckedUpdateInput>
    /**
     * Choose, which Gun_Details to update.
     */
    where: Gun_DetailsWhereUniqueInput
  }


  /**
   * Gun_Details updateMany
   */
  export type Gun_DetailsUpdateManyArgs = {
    /**
     * The data used to update Gun_Details.
     */
    data: XOR<Gun_DetailsUpdateManyMutationInput, Gun_DetailsUncheckedUpdateManyInput>
    /**
     * Filter which Gun_Details to update
     */
    where?: Gun_DetailsWhereInput
  }


  /**
   * Gun_Details upsert
   */
  export type Gun_DetailsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * The filter to search for the Gun_Details to update in case it exists.
     */
    where: Gun_DetailsWhereUniqueInput
    /**
     * In case the Gun_Details found by the `where` argument doesn't exist, create a new Gun_Details with this data.
     */
    create: XOR<Gun_DetailsCreateInput, Gun_DetailsUncheckedCreateInput>
    /**
     * In case the Gun_Details was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Gun_DetailsUpdateInput, Gun_DetailsUncheckedUpdateInput>
  }


  /**
   * Gun_Details delete
   */
  export type Gun_DetailsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
    /**
     * Filter which Gun_Details to delete.
     */
    where: Gun_DetailsWhereUniqueInput
  }


  /**
   * Gun_Details deleteMany
   */
  export type Gun_DetailsDeleteManyArgs = {
    /**
     * Filter which Gun_Details to delete
     */
    where?: Gun_DetailsWhereInput
  }


  /**
   * Gun_Details findRaw
   */
  export type Gun_DetailsFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Gun_Details aggregateRaw
   */
  export type Gun_DetailsAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Gun_Details without action
   */
  export type Gun_DetailsArgs = {
    /**
     * Select specific fields to fetch from the Gun_Details
     */
    select?: Gun_DetailsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DataScalarFieldEnum: {
    id: 'id',
    Gtype: 'Gtype',
    Gname: 'Gname',
    caliber: 'caliber',
    serialN: 'serialN',
    acquisition: 'acquisition',
    turnOver: 'turnOver',
    returned: 'returned',
    cost: 'cost',
    station: 'station',
    rank: 'rank',
    lastName: 'lastName',
    firstName: 'firstName',
    middleName: 'middleName',
    QLFR: 'QLFR',
    qrCode: 'qrCode'
  };

  export type DataScalarFieldEnum = (typeof DataScalarFieldEnum)[keyof typeof DataScalarFieldEnum]


  export const Gun_DetailsScalarFieldEnum: {
    id: 'id',
    Gtype: 'Gtype',
    Gname: 'Gname',
    caliber: 'caliber',
    serialN: 'serialN',
    acquisition: 'acquisition',
    turnOver: 'turnOver',
    returned: 'returned',
    cost: 'cost',
    station: 'station',
    rank: 'rank',
    lastName: 'lastName',
    firstName: 'firstName',
    middleName: 'middleName',
    QLFR: 'QLFR',
    qrCode: 'qrCode'
  };

  export type Gun_DetailsScalarFieldEnum = (typeof Gun_DetailsScalarFieldEnum)[keyof typeof Gun_DetailsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    usertype: 'usertype',
    password: 'password',
    shift: 'shift',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserTestScalarFieldEnum: {
    id: 'id',
    policeId: 'policeId',
    email: 'email',
    lastName: 'lastName',
    firstName: 'firstName',
    middleName: 'middleName',
    QLFR: 'QLFR',
    station: 'station',
    rank: 'rank',
    usertype: 'usertype',
    password: 'password',
    shift: 'shift',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTestScalarFieldEnum = (typeof UserTestScalarFieldEnum)[keyof typeof UserTestScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    usertype?: StringFilter | string
    password?: StringFilter | string
    shift?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    usertype?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    shift?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserTestWhereInput = {
    AND?: Enumerable<UserTestWhereInput>
    OR?: Enumerable<UserTestWhereInput>
    NOT?: Enumerable<UserTestWhereInput>
    id?: StringFilter | string
    policeId?: StringFilter | string
    email?: StringFilter | string
    lastName?: StringFilter | string
    firstName?: StringFilter | string
    middleName?: StringFilter | string
    QLFR?: StringNullableFilter | string | null
    station?: StringFilter | string
    rank?: StringFilter | string
    usertype?: StringFilter | string
    password?: StringFilter | string
    shift?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserTestOrderByWithRelationInput = {
    id?: SortOrder
    policeId?: SortOrder
    email?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTestWhereUniqueInput = {
    id?: string
    policeId?: string
    email?: string
  }

  export type UserTestOrderByWithAggregationInput = {
    id?: SortOrder
    policeId?: SortOrder
    email?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTestCountOrderByAggregateInput
    _avg?: UserTestAvgOrderByAggregateInput
    _max?: UserTestMaxOrderByAggregateInput
    _min?: UserTestMinOrderByAggregateInput
    _sum?: UserTestSumOrderByAggregateInput
  }

  export type UserTestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserTestScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserTestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserTestScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    policeId?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    middleName?: StringWithAggregatesFilter | string
    QLFR?: StringNullableWithAggregatesFilter | string | null
    station?: StringWithAggregatesFilter | string
    rank?: StringWithAggregatesFilter | string
    usertype?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    shift?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DataWhereInput = {
    AND?: Enumerable<DataWhereInput>
    OR?: Enumerable<DataWhereInput>
    NOT?: Enumerable<DataWhereInput>
    id?: StringFilter | string
    Gtype?: StringFilter | string
    Gname?: StringFilter | string
    caliber?: StringFilter | string
    serialN?: StringFilter | string
    acquisition?: StringFilter | string
    turnOver?: StringFilter | string
    returned?: StringFilter | string
    cost?: IntFilter | number
    station?: StringFilter | string
    rank?: StringFilter | string
    lastName?: StringFilter | string
    firstName?: StringFilter | string
    middleName?: StringFilter | string
    QLFR?: StringFilter | string
    qrCode?: BytesNullableFilter | Buffer | null
  }

  export type DataOrderByWithRelationInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type DataWhereUniqueInput = {
    id?: string
  }

  export type DataOrderByWithAggregationInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
    _count?: DataCountOrderByAggregateInput
    _avg?: DataAvgOrderByAggregateInput
    _max?: DataMaxOrderByAggregateInput
    _min?: DataMinOrderByAggregateInput
    _sum?: DataSumOrderByAggregateInput
  }

  export type DataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DataScalarWhereWithAggregatesInput>
    OR?: Enumerable<DataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DataScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    Gtype?: StringWithAggregatesFilter | string
    Gname?: StringWithAggregatesFilter | string
    caliber?: StringWithAggregatesFilter | string
    serialN?: StringWithAggregatesFilter | string
    acquisition?: StringWithAggregatesFilter | string
    turnOver?: StringWithAggregatesFilter | string
    returned?: StringWithAggregatesFilter | string
    cost?: IntWithAggregatesFilter | number
    station?: StringWithAggregatesFilter | string
    rank?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    middleName?: StringWithAggregatesFilter | string
    QLFR?: StringWithAggregatesFilter | string
    qrCode?: BytesNullableWithAggregatesFilter | Buffer | null
  }

  export type Gun_DetailsWhereInput = {
    AND?: Enumerable<Gun_DetailsWhereInput>
    OR?: Enumerable<Gun_DetailsWhereInput>
    NOT?: Enumerable<Gun_DetailsWhereInput>
    id?: StringFilter | string
    Gtype?: StringFilter | string
    Gname?: StringFilter | string
    caliber?: StringFilter | string
    serialN?: StringFilter | string
    acquisition?: StringFilter | string
    turnOver?: StringFilter | string
    returned?: StringFilter | string
    cost?: IntFilter | number
    station?: StringFilter | string
    rank?: StringFilter | string
    lastName?: StringFilter | string
    firstName?: StringFilter | string
    middleName?: StringFilter | string
    QLFR?: StringFilter | string
    qrCode?: BytesNullableFilter | Buffer | null
  }

  export type Gun_DetailsOrderByWithRelationInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type Gun_DetailsWhereUniqueInput = {
    id?: string
  }

  export type Gun_DetailsOrderByWithAggregationInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
    _count?: Gun_DetailsCountOrderByAggregateInput
    _avg?: Gun_DetailsAvgOrderByAggregateInput
    _max?: Gun_DetailsMaxOrderByAggregateInput
    _min?: Gun_DetailsMinOrderByAggregateInput
    _sum?: Gun_DetailsSumOrderByAggregateInput
  }

  export type Gun_DetailsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Gun_DetailsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Gun_DetailsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Gun_DetailsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    Gtype?: StringWithAggregatesFilter | string
    Gname?: StringWithAggregatesFilter | string
    caliber?: StringWithAggregatesFilter | string
    serialN?: StringWithAggregatesFilter | string
    acquisition?: StringWithAggregatesFilter | string
    turnOver?: StringWithAggregatesFilter | string
    returned?: StringWithAggregatesFilter | string
    cost?: IntWithAggregatesFilter | number
    station?: StringWithAggregatesFilter | string
    rank?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    middleName?: StringWithAggregatesFilter | string
    QLFR?: StringWithAggregatesFilter | string
    qrCode?: BytesNullableWithAggregatesFilter | Buffer | null
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    usertype: string
    password: string
    shift: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    usertype: string
    password: string
    shift: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    usertype: string
    password: string
    shift: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestCreateInput = {
    id?: string
    policeId: string
    email: string
    lastName: string
    firstName: string
    middleName: string
    QLFR?: string | null
    station: string
    rank: string
    usertype: string
    password: string
    shift: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTestUncheckedCreateInput = {
    id?: string
    policeId: string
    email: string
    lastName: string
    firstName: string
    middleName: string
    QLFR?: string | null
    station: string
    rank: string
    usertype: string
    password: string
    shift: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTestUpdateInput = {
    policeId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: NullableStringFieldUpdateOperationsInput | string | null
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestUncheckedUpdateInput = {
    policeId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: NullableStringFieldUpdateOperationsInput | string | null
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestCreateManyInput = {
    id?: string
    policeId: string
    email: string
    lastName: string
    firstName: string
    middleName: string
    QLFR?: string | null
    station: string
    rank: string
    usertype: string
    password: string
    shift: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTestUpdateManyMutationInput = {
    policeId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: NullableStringFieldUpdateOperationsInput | string | null
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestUncheckedUpdateManyInput = {
    policeId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: NullableStringFieldUpdateOperationsInput | string | null
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    usertype?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    shift?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataCreateInput = {
    id?: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode?: Buffer | null
  }

  export type DataUncheckedCreateInput = {
    id?: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode?: Buffer | null
  }

  export type DataUpdateInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type DataUncheckedUpdateInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type DataCreateManyInput = {
    id?: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode?: Buffer | null
  }

  export type DataUpdateManyMutationInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type DataUncheckedUpdateManyInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type Gun_DetailsCreateInput = {
    id?: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode?: Buffer | null
  }

  export type Gun_DetailsUncheckedCreateInput = {
    id?: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode?: Buffer | null
  }

  export type Gun_DetailsUpdateInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type Gun_DetailsUncheckedUpdateInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type Gun_DetailsCreateManyInput = {
    id?: string
    Gtype: string
    Gname: string
    caliber: string
    serialN: string
    acquisition: string
    turnOver: string
    returned: string
    cost: number
    station: string
    rank: string
    lastName: string
    firstName: string
    middleName: string
    QLFR: string
    qrCode?: Buffer | null
  }

  export type Gun_DetailsUpdateManyMutationInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type Gun_DetailsUncheckedUpdateManyInput = {
    Gtype?: StringFieldUpdateOperationsInput | string
    Gname?: StringFieldUpdateOperationsInput | string
    caliber?: StringFieldUpdateOperationsInput | string
    serialN?: StringFieldUpdateOperationsInput | string
    acquisition?: StringFieldUpdateOperationsInput | string
    turnOver?: StringFieldUpdateOperationsInput | string
    returned?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    station?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    QLFR?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type UserTestCountOrderByAggregateInput = {
    id?: SortOrder
    policeId?: SortOrder
    email?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTestAvgOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type UserTestMaxOrderByAggregateInput = {
    id?: SortOrder
    policeId?: SortOrder
    email?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTestMinOrderByAggregateInput = {
    id?: SortOrder
    policeId?: SortOrder
    email?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    usertype?: SortOrder
    password?: SortOrder
    shift?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTestSumOrderByAggregateInput = {
    shift?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type BytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
    isSet?: boolean
  }

  export type DataCountOrderByAggregateInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type DataAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type DataMaxOrderByAggregateInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type DataMinOrderByAggregateInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type DataSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
    isSet?: boolean
  }

  export type Gun_DetailsCountOrderByAggregateInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type Gun_DetailsAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type Gun_DetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type Gun_DetailsMinOrderByAggregateInput = {
    id?: SortOrder
    Gtype?: SortOrder
    Gname?: SortOrder
    caliber?: SortOrder
    serialN?: SortOrder
    acquisition?: SortOrder
    turnOver?: SortOrder
    returned?: SortOrder
    cost?: SortOrder
    station?: SortOrder
    rank?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    QLFR?: SortOrder
    qrCode?: SortOrder
  }

  export type Gun_DetailsSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
    unset?: boolean
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedBytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
    isSet?: boolean
  }

  export type NestedBytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
    isSet?: boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}