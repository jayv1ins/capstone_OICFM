
<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="UTF-8">
  <link rel="Website Icon" type="png" href="logo_npd.png" />
  <title> Scanner</title>
  <link rel="stylesheet" href="/stylesheets/index_style.css">
  <!-- Boxicons CDN Link -->
  <link href='https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css' rel='stylesheet'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

</head>

<body>
  <div class="sidebar">
    <div class="logo-details">
      <img src="pnp-male.jpg" alt="" class="circle-image">
      <% if (user.usertype==='Admin' ) { %>
        <span class="logo_name">
          <%= user.firstName%>
            <p style="font-size: small;">(Admin)</p>
        </span>

    </div>
    <ul class="nav-links">
      <li>
        <a href="/index" id="home-link" class="active">
          <i class='bx bx-grid-alt'></i>
          <span class="links_name">Dashboard</span>
        </a>
      </li>
      <li>
        <a id="datatable-link" href="/DataTable">
          <i class='bx bx-table'></i>
          <span class="links_name">Records</span>
        </a>
      </li>
      <li>
        <a id="scanner-link" href="/scanner">
          <i class='bx bx-scan'></i>
          <span class="links_name">Scanner</span>
        </a>
      </li>
      <li>
        <a id="admin-table-link" href="/admin/table">
          <i class='bx bx-user'></i>
          <span class="links_name">Manager</span>
        </a>
      </li>
      <li>
        <a href="#">
          <i class='bx bx-book'></i>
          <span class="links_name">Help</span>
        </a>
      </li>

      <li class="log_out">
        <a id="logout-link" href="/logout">
          <i class='bx bx-log-out'></i>
          <span class="links_name">Log out</span>
        </a>
      </li>
    </ul>
  </div>
  <% } else { %>

    <span class="logo_name">
      <%= user.firstName%>
      <p style="font-size: small;">(Manager)</p>
    </span>
    </div>
    <ul class="nav-links">
      <li>
        <a href="/profile/<%= user._id%>" id="home-link" class="active">
          <i class='bx bx-user'></i>
          <span class="links_name">Profile</span>
        </a>
      </li>
      <li>
        <a href="/index" id="home-link" class="active">
          <i class='bx bx-grid-alt'></i>
          <span class="links_name">Dashboard</span>
        </a>
      </li>
      <li>
        <a id="datatable-link" href="/DataTable">
          <i class='bx bx-table'></i>
          <span class="links_name">Records</span>
        </a>
      </li>
      <li>
        <a id="scanner-link" href="/scanner">
          <i class='bx bx-scan'></i>
          <span class="links_name">Scanner</span>
        </a>
      </li>
      <li>
        <a href="#">
          <i class='bx bx-book'></i>
          <span class="links_name">Help</span>
        </a>
      </li>

      <li class="log_out">
        <a id="logout-link" href="/logout">
          <i class='bx bx-log-out'></i>
          <span class="links_name">Log out</span>
        </a>
      </li>
    </ul>
    </div>
    <% } %>
      <!-- Current Active Link -->
      <section class="home-section">
        <nav>
          <div class="sidebar-button">
            <i class='bx bx-menu sidebarBtn'></i>
            <span class="dashboard">Scanner</span>
          </div>

        </nav>


    <div class="home-content">
      <div class="main-boxes">
        <div class="right-boxes box" style="width: 100%; height: auto;">
          <header>
            <h1>Serial Number Extraction</h1>
          </header>

            <center>

              <!-- File select -->
              <button type="button" class="upload-button">
                <i class='bx bx-upload'></i> Upload File
                <input type="file" name="image" id="file-input" class="custom-input" accept="image/*">
              </button>
              <img id="captured-image"  alt="Captured/Selected Image"
                style="max-width: 750px; max-height: 500px; display: none;">
            

              <div class="crop-container">
                <label for="cropImage" id="cropLabel" style="display: none;">Crop Image</label>
                <input type="checkbox" class="crop-container" id="cropImage" name="cropImage" style="display: none; margin-right: 15px;" class="crop-checkbox">
              </div>

              <button  id="recognizeText" style="display: none;" class="extract-button">Extract Serial Number</button>

              <!-- Buttons -->
              <button id="doneButton" style="display: none;" class="done-button">Done</button>
              <button id="resetButton" style="display: none;" class="reset-button">Reset</button>
              <a id="downloadLink" download="cropped_image.jpg" style="display: none;" class="download-link"> Download</a>

              <!-- Camera  -->
              <button id="startCamera" class="custom-button3">Start Camera <i class='bx bx-camera'></i></button>
              <button id="capture" class="custom-button3" style="display: none;">Capture Image <i
                  class='bx bx-camera'></i> </button>
              <button id="stopCamera" style="display: none;" class="custom-button3 custom-button-danger">Stop Camera <i
                  class='bx bx-stop'></i></button>

              <!-- For Camera and File Val -->
              <video id="video" width="640" height="480" autoplay style="display:none;"></video>
              <canvas id="canvas" width="640" height="480" style="display:none;"></canvas>
            </center>


              <!-- Notification Message -->
              <notif>
                  <h2 id="ETlabel" style="display: none;">Extracted Text:</h2>
                  <pre id="recognizedTextResult"  style="display: none;"></pre>

                      <div style="color: green; margin-top: 10px; text-align: center;">
                        <p style="color: green;" id="successMessage"></p>
                        
                        <p  id="GtypeD"></p>
                        <p  id="GnameD"></p>
                        <p  id="lastNameD"></p>
                        <p  id="firstNameD"></p>
                        <p  id="turnOverD"></p>
                        <p  id="returnedD"></p>
                        
                    

                      </div>
                        <div style="color: red; margin-top: 10px; text-align: center;">
                          <p style="color: red;" id="errorMessage">
                          </p>
                        </div>
              </notif>



        </div>
      </div>

    </div>


   
      
  </section>

  <script>
    let sidebar = document.querySelector(".sidebar");
    let sidebarBtn = document.querySelector(".sidebarBtn");
    sidebarBtn.onclick = function () {
      sidebar.classList.toggle("active");
      if (sidebar.classList.contains("active")) {
        sidebarBtn.classList.replace("bx-menu", "bx-menu-alt-right");
      } else
        sidebarBtn.classList.replace("bx-menu-alt-right", "bx-menu");
    }

  
  </script>

  <script>
  const startCameraButton = document.getElementById('startCamera');
  const stopCameraButton = document.getElementById('stopCamera');
  const captureButton = document.getElementById('capture');
  const video = document.getElementById('video');
  const canvas = document.getElementById('canvas');
  const capturedImage = document.getElementById('captured-image');
  const recognizeTextButton = document.getElementById('recognizeText');
  const fileInput = document.querySelector('#file-input');
  const cropLabel = document.getElementById('cropLabel');
  const cropCheckbox = document.getElementById('cropImage');
  const doneButton = document.getElementById('doneButton');
  const downloadLink = document.getElementById('downloadLink');
  const resetButton = document.getElementById('resetButton');
  const recognizedTextResult = document.getElementById('recognizedTextResult');

  const ETlabel = document.getElementById('ETlabel');
  const errorMessage = document.getElementById('errorMessage');
  const successMessage = document.getElementById('successMessage');

  const IdD = document.getElementById('IdD');
  const GnameD = document.getElementById('GnameD');
  const GtypeD = document.getElementById('GtypeD');
  const LastNameD = document.getElementById('lastNameD');
  const FirstNameD = document.getElementById('firstNameD');
  const TurnOverD = document.getElementById('turnOverD');
  const ReturnedD = document.getElementById('returnedD');

 


  let stream;
  let cropper;

  function updateImageFeedback() {
    if (cropper) {
          cropper.destroy();
          cropper = null;
        }
    if (fileInput.files.length > 0) {
      const selectedFile = fileInput.files[0];
      const imgUrl = window.URL.createObjectURL(selectedFile);
      capturedImage.src = imgUrl;
      capturedImage.style.display = 'block';
      capturedImage.style.width = '540px';
     capturedImage.style.height = '380px';

      recognizeTextButton.style.display = 'inline-block';

      cropLabel.style.display = "block";
      cropCheckbox.style.display = "block";
      startCameraButton.style.display = 'none';

      const reader = new FileReader();
      reader.onload = function (event) {
        const imgDataUri = event.target.result;
        capturedImage.src = imgDataUri;
        // Prepare the image for form submission
        fileInput.src = imgDataUri;
      };
      reader.readAsDataURL(selectedFile);

        if (cropper) {
          cropper.destroy();
          cropper = null;
        }

      if (cropCheckbox.checked) {
        recognizeTextButton.style.display = "none";
        doneButton.style.display = "block";
        resetButton.style.display = "block";
        downloadLink.style.display = "none";

        cropper = new Cropper(capturedImage, {
          aspectRatio: 3 / 1,
          viewMode: 1,
        });
        console.log("sa crop",capturedImage);

        doneButton.addEventListener("click", () => {
          doneButton.style.display = "none";
          recognizeTextButton.style.display = "block";
        });
      } else {
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
        doneButton.style.display = "none";
        downloadLink.style.display = "none";
        recognizeTextButton.style.display = "block";
      }
    } else {
      capturedImage.src = "";
      capturedImage.style.display = "none";
      recognizeTextButton.style.display = "none";
      cropLabel.style.display = "none";
      cropCheckbox.style.display = "none";
      doneButton.style.display = "none";
      downloadLink.style.display = "none";
      resetButton.style.display = "none";
    }
  }

    fileInput.onchange = () => {
      updateImageFeedback();
    };

    async function initCamera() {
      try {
        stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
        startCameraButton.style.display = 'none';
        stopCameraButton.style.display = 'inline-block';
        captureButton.style.display = 'inline-block';
        video.style.display = 'block';
        canvas.style.display = 'none';
      } catch (error) {
        console.error('Error accessing camera:', error);
      }
    }

    function stopCamera() {
      const tracks = stream.getTracks();
      tracks.forEach(track => track.stop());
      video.srcObject = null;
      startCameraButton.style.display = 'inline-block';
      stopCameraButton.style.display = 'none';
      captureButton.style.display = 'none';
      video.style.display = 'none';
      canvas.style.display = 'none';
    }

    function captureImage() {
    const context = canvas.getContext('2d');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    context.drawImage(video, 0, 0, canvas.width, canvas.height);

    captureButton.style.display = 'none';
    video.style.display = 'none';

    const imgDataUri = canvas.toDataURL('image/jpeg');
    capturedImage.src = imgDataUri;
    dataURItoBlob(imgDataUri);
    console.log("sa capture", imgDataUri);
    doneButton.style.display = "block";
    resetButton.style.display = "block";
    downloadLink.style.display = "none";
    stopCameraButton.style.display = 'none';

    capturedImage.style.display = 'block';
    capturedImage.style.width = '540px';
    capturedImage.style.height = '380px';


    doneButton.addEventListener("click", () => {
      doneButton.style.display = "none";
      recognizeTextButton.style.display = "block";
    });

    // Destroy the previous cropper if exists
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
    doneButton.style.display = "block";
    recognizeTextButton.style.display = "none";
     

    // Initialize the Cropper for the captured image
    cropper = new Cropper(capturedImage, {
      aspectRatio: 3 / 1,
      viewMode: 1,
    });

  }


    function dataURItoBlob(dataURI) {
      const byteString = atob(dataURI.split(',')[1]);
      const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
      const ab = new ArrayBuffer(byteString.length);
      const ia = new Uint8Array(ab);
      for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }
      return new Blob([ab], { type: mimeString });
    }

    function downloadImage() {
      const downloadLink = document.createElement('a');
      downloadLink.href = capturedImage.src;
      downloadLink.download = 'captured_image.jpg';
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }

    function recognizeText(imageBlob) {
      if (cropper) {
        // Get the cropped canvas
        const croppedCanvas = cropper.getCroppedCanvas();

        startCameraButton.style.display = 'block';
        ETlabel.style.display = 'block';
        recognizedTextResult.style.display = 'block';

        cropLabel.style.display = "none";
        cropCheckbox.style.display = "none";
        doneButton.style.display = "none";
        resetButton.style.display = "none";
        
        capturedImage.style.display = 'none';
        recognizeTextButton.style.display = 'none';
        //To blob the crop version
        croppedCanvas.toBlob((blob) => {
          const formData = new FormData();
          formData.append('image', blob);

          // Perform the fetch call with the FormData
          fetch('/scan', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(data => {
            console.log('Success:', data);
            recognizedTextResult.textContent = data.text;
            errorMessage.textContent = data.errorMessage;
            successMessage.textContent = data.successMessage;

            GnameD.textContent = data.GnameD;
            GtypeD.textContent = data.GtypeD;
            LastNameD.textContent = data.lastNameD;
            FirstNameD.textContent = data.firstNameD;
            TurnOverD.textContent = data.turnOverD;
            ReturnedD.textContent = data.returnedD;
            cropper.destroy();
          cropper = null;
          cropCheckbox.checked = false;

          })
          
          .catch((error) => {
            console.error('Error:', error);
          });
        }, 'image/jpeg'); 
      } else {
        //File select
        const formData = new FormData();
        formData.append('image', imageBlob);

        console.log('Image size:', imageBlob.size, 'bytes');

        capturedImage.src = imageBlob;
        capturedImage.style.display = 'none';
        video.style.display = 'none';
        stopCameraButton.style.display = 'none';
        captureButton.style.display = 'none';

        cropLabel.style.display = "none";
        cropCheckbox.style.display = "none";
        recognizeTextButton.style.display = 'none';


        startCameraButton.style.display = 'block';
        ETlabel.style.display = 'block';
        recognizedTextResult.style.display = 'block';

        fetch('/scan', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          console.log('Success:', data.IdD);
          recognizedTextResult.textContent = data.text;
          errorMessage.textContent = data.errorMessage;
          successMessage.textContent = data.successMessage;
         
          GnameD.textContent = data.GnameD;
          GtypeD.textContent = data.GtypeD;
          LastNameD.textContent = data.lastNameD;
          FirstNameD.textContent = data.firstNameD;
          TurnOverD.textContent = data.turnOverD;
          ReturnedD.textContent = data.returnedD;
          
          
          cropper.destroy();
          cropper = null;
          cropCheckbox.checked = false;


        })
        .catch((error) => {
        });
      } 
      
      
    }

    document.getElementById("cropImage").addEventListener("change", () => {
      updateImageFeedback();
    });

    document.getElementById("doneButton").addEventListener("click", () => {
      if (cropper) {
        const croppedCanvas = cropper.getCroppedCanvas();
        const downloadLink = document.getElementById("downloadLink");
        downloadLink.href = croppedCanvas.toDataURL("image/jpeg");
      }
    });

    document.getElementById("resetButton").addEventListener("click", () => {
      //If there an result
      fileInput.src = "";
      startCameraButton.style.display = 'block';
      stopCameraButton.style.display = 'none';
      captureButton.style.display = 'none';
      capturedImage.style.display = 'none';

      ETlabel.style.display = 'none';
      recognizedTextResult.style.display = 'none';
      

      cropper.destroy();
          cropper = null;
          captureButton.style.display = 'none';
          capturedImage.style.display = "none";
          capturedImage.src = "";
          cropCheckbox.style.display = "none";
          cropLabel.style.display = "none";
          recognizeTextButton.style.display = 'none';      
          cropCheckbox.checked = false;
          resetButton.style.display = "none";
          doneButton.style.display = "none";
    });

    startCameraButton.addEventListener('click', initCamera);
    stopCameraButton.addEventListener('click', stopCamera);
    captureButton.addEventListener('click', captureImage);
    recognizeTextButton.addEventListener('click', () => recognizeText(dataURItoBlob(capturedImage.src)));



  </script>





  <style>
    .cropper-container cropper-bg {
      width: 640px;
     height: 480px;
     position: relative;
    }

    .cropper-crop-box {
     height: 480px;
    width: 640px;
    }
    
    .crop-container {
      display: flex;
      flex-direction: row;
      align-items: center;
      background: #3498db;
      margin-top: 10px;
      border-radius: 5px;
      width: fit-content;
    }

    #cropLabel {
      color: #fff;
      padding: 10px 15px;
    }

    .extract-button,
    .reset-button,
    .done-button {
      display: inline-block;
      padding: 10px 15px;
      margin-top: 10px;
      background-color: #3498db;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      text-align: center;
    }


    .extract-button:hover,
    .reset-button:hover,
    .done-button:hover {
      background-color: #2980b9;
    }

    .reset-button {
      background-color: #e74c3c;
    }

    .reset-button:hover {
      background-color: #c0392b;
    }

    .download-link {
      display: inline-block;
      padding: 10px 15px;
      margin-top: 10px;
      background-color: #2ecc71;
      color: #fff;
      text-decoration: none;
      border-radius: 5px;
      cursor: pointer;
      width: fit-content;
    }

    .download-link:hover {
      background-color: #27ae60;
    }

    form {
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }



    img {
      max-width: 100%;
      max-height: 300px;
      margin: 20px 0;
      border: 1px solid #ccc;
      border-radius: 5px;
    }



    notif {
      text-align: center;
      margin-top: 20px;
    }



    pre {
      background-color: #e6e6e6;
      padding: 10px;
      border-radius: 5px;
      overflow: auto;
    }

    header {
      display: flex;
      flex-direction: column;
      justify-content: space-evenly;
      align-items: center;
    }

    .upload-button {
      position: relative;
      padding: 11px 16px;
      font-size: 15px;
      line-height: 1.5;
      border-radius: 3px;
      color: #fff;
      background-color: #4CAF50;
      border: 0;
      transition: 0.2s;
      overflow: hidden;
      margin-bottom: 10px;
    }

    .upload-button input[type="file"] {
      cursor: pointer;
      position: absolute;
      left: 0%;
      top: 0%;
      transform: scale(3);
      opacity: 0;
    }

    .upload-button:hover {
      background-color: #45A049;
    }
  </style>


</body>

</html>