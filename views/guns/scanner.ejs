<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <title>Scanner</title>
    <%- include('../components/navbar') %>
    <style>
        body {
            background: #2e3441;
            background-image: -webkit-radial-gradient(top, circle cover, #4e7a89, #2e3441 80%);
            background-image: -moz-radial-gradient(top, circle cover, #4e7a89, #2e3441 80%);
            background-image: -o-radial-gradient(top, circle cover, #4e7a89, #2e3441 80%);
            background-image: radial-gradient(top, circle cover, #4e7a89, #2e3441 80%);
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            font-family: sans-serif;
        }

        .upper div {
            display: inline;
            margin-left: 100px;
            white-space: pre;
            text-align: center;
            font-size: 25px;
            font-weight: 500;
            color: lightgreen;
            background: none;
        }

        .bottom {
            margin-top: 30px;
            display: flex;
        }

        .bottom div {
            flex: 1;
            border: 1px solid rgb(118, 118, 118);
            height: 400px;
            margin: 10px;
        }

        .bottom div img {
            max-width: calc(100% - 20px);
            max-height: calc(100% - 20px);
            margin: 10px;
        }

        .bottom div textarea {
            resize: none;
            width: calc(100% - 21px);
            height: calc(100% - 21px);
            padding: 10px;
            font-size: 20px;
            outline: none;
            border: none;
        }

        .bottom div:first-child {
            margin-left: 0px;
            -webkit-box-align: center;
            -webkit-box-pack: center;
            display: -webkit-box;
        }

        .bottom div:last-child {
            margin-right: 0px;
        }

        .camera-start {
            cursor: pointer;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            margin-left: 20px;
        }

        .camera-take {
            cursor: pointer;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            display: none;
            margin-left: 15px;
        }

        .camera-stop {
            cursor: pointer;
            padding: 5px 10px;
            background-color: #d9534f;
            color: white;
            border: none;
            border-radius: 5px;
            display: none;
        }

        .camera-feed-container {
            position: relative;
        }

        .camera-feed {
            max-width: 100%;
            max-height: 100%;
        }
    </style>
</head>

<body>
    <!-- Navigation bar can be included here if needed -->

    <div class="container" style="margin-top: 50px;">
        <div class="upper">
            <input type="file" id="fileSelector" class="form-control col-sm-4 d-inline">
            <button class="camera-start" id="startCameraButton">Start Camera</button>
            <button class="camera-take" id="takePictureButton">Take Picture</button>
            <button class="camera-stop" id="stopCameraButton">Stop</button>
            <!-- Notification Message -->
            <div class="progress"></div>
            <div id="successMessage" style="display: none; color: green; margin-top: 10px; text-align: center;">
                <p style="color: green;" id="successMessageText"></p>
            </div>
            <div id="errorMessage" style="display: none; color: red; margin-top: 10px; text-align: center;">
                <p style="color: yellow;" id="errorMessageText"></p>
            </div>
        </div>
        <div class="bottom">
            <div class="camera-feed-container">
                <video id="cameraFeed" class="camera-feed" autoplay></video>
                <img src="" class="camera-image">
            </div>
            <div style="border: white;">
                <textarea id="resultTextarea" placeholder="Result" readonly class="text-center"></textarea>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/tesseract.js@v2.0.0-alpha.13/dist/tesseract.min.js"></script>
    <script>
        const fileSelector = document.querySelector('#fileSelector');
        const img = document.querySelector('.camera-image');
        const cameraFeed = document.querySelector('#cameraFeed');
        const progress = document.querySelector('.progress');
        const textarea = document.querySelector('textarea');
        const startCameraButton = document.querySelector('#startCameraButton');
        const takePictureButton = document.querySelector('#takePictureButton');
        const stopCameraButton = document.querySelector('#stopCameraButton');
        const successMessage = document.getElementById('successMessage');
        const successMessageText = document.getElementById('successMessageText');
        const errorMessage = document.getElementById('errorMessage');
        const errorMessageText = document.getElementById('errorMessageText');

        let cameraStream;

        fileSelector.onchange = () => {
            const selectedFile = fileSelector.files[0];
            if (selectedFile) {
                const imgUrl = window.URL.createObjectURL(selectedFile);
                img.src = imgUrl;
                recognizeText(selectedFile);
            }
        };

        startCameraButton.addEventListener('click', () => {
            startCamera();
        });
        takePictureButton.addEventListener('click', () => {
            takePicture();
        });
        stopCameraButton.addEventListener('click', () => {
            stopCamera();
        });

        function startCamera() {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(function (stream) {
                    cameraStream = stream;
                    cameraFeed.style.display = 'block';
                    cameraFeed.srcObject = stream;
                    startCameraButton.style.display = 'none';
                    takePictureButton.style.display = 'inline-block';
                    stopCameraButton.style.display = 'inline-block';
                })
                .catch(function (error) {
                    console.error('Error accessing camera:', error);
                });
        }

        function takePicture() {
            const canvas = document.createElement('canvas');
            canvas.width = cameraFeed.videoWidth;
            canvas.height = cameraFeed.videoHeight;
            canvas.getContext('2d').drawImage(cameraFeed, 0, 0, canvas.width, canvas.height);
            const imgDataUri = canvas.toDataURL('image/jpeg');
            img.src = imgDataUri;
            recognizeText(dataURItoBlob(imgDataUri));
        }

        function stopCamera() {
            if (cameraStream) {
                cameraStream.getTracks().forEach(track => track.stop());
            }
            cameraFeed.style.display = 'none';
            startCameraButton.style.display = 'inline-block';
            takePictureButton.style.display = 'none';
            stopCameraButton.style.display = 'none';
        }

        function dataURItoBlob(dataURI) {
            const byteString = atob(dataURI.split(',')[1]);
            const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            const ab = new ArrayBuffer(byteString.length);
            const ia = new Uint8Array(ab);
            for (let i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            return new Blob([ab], { type: mimeString });
        }

        function recognizeText(file) {
            textarea.innerHTML = '';
            const rec = new Tesseract.TesseractWorker();
            rec.recognize(file)
                .progress(function (response) {
                    if (response.status == 'recognizing text') {
                        progress.innerHTML = response.status + '   ' + response.progress;
                    } else {
                        progress.innerHTML = response.status;
                    }
                })
                .then(function (data) {
                    textarea.innerHTML = data.text;
                    progress.innerHTML = 'Done!';
                    const serialNumber = data.text.replace(/\n/g, '');

                    if (serialNumber) {
    const xhr = new XMLHttpRequest();
    const route = '/scan';
    xhr.open('POST', route, true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
                console.log('Serial number sent successfully');
                successMessage.style.display = 'block';
                successMessageText.innerText = `The data has been updated successfully for Serial Number: ${serialNumber}`;
                errorMessage.style.display = 'none'; // Hide error message if shown
            } 
        }
    };
    const data = JSON.stringify({ serialNumber });
    xhr.send(data);
} else {
    errorMessage.style.display = 'block';
    errorMessageText.innerText = 'No serial number found in the image. Please try again with a clearer picture.';
    successMessage.style.display = 'none'; // Hide success message if shown
}
                });
        }
    </script>
</body>
</html>
