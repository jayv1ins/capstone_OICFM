<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="UTF-8">
  <link rel="Website Icon" type="png" href="logo_npd.png" />
  <title> Scanner</title>
  <link rel="stylesheet" href="/stylesheets/index_style.css">
  <!-- Boxicons CDN Link -->
  <link href='https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css' rel='stylesheet'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

</head>

<body>
  <div class="sidebar">
    <div class="logo-details">
      <img src="pnp-male.jpg" alt="" class="circle-image">
      <span class="logo_name">
        <%= user.firstName%>
      </span>
    </div>
    <ul class="nav-links">
      <li>
        <a href="/index" id="home-link" class="active">
          <i class='bx bx-grid-alt'></i>
          <span class="links_name">Dashboard</span>
        </a>
      </li>
      <li>
        <a id="datatable-link" href="/DataTable">
          <i class='bx bx-table'></i>
          <span class="links_name">Records</span>
        </a>
      </li>
      <li>
        <a id="scanner-link" href="/scanner">
          <i class='bx bx-scan'></i>
          <span class="links_name">Scanner</span>
        </a>
      </li>
      <li>
        <a id="admin-table-link" href="/admin/table">
          <i class='bx bx-user'></i>
          <span class="links_name">Manager</span>
        </a>
      </li>
      <li>
        <a href="#">
          <i class='bx bx-book'></i>
          <span class="links_name">Help</span>
        </a>
      </li>

      <li class="log_out">
        <a id="logout-link" href="/logout">
          <i class='bx bx-log-out'></i>
          <span class="links_name">Log out</span>
        </a>
      </li>
    </ul>
  </div>
  <section class="home-section">
    <nav>
      <div class="sidebar-button">
        <i class='bx bx-menu sidebarBtn'></i>
        <span class="dashboard">Scanner</span>
      </div>

    </nav>


    <div class="home-content">
      <div class="main-boxes">
        <div class="right-boxes box" style="width: 100%; height: auto;">
          <header>
            <h1>Convert image to Text</h1>
          </header>


          <form method="post" action="/scan" enctype="multipart/form-data">


            <button type="button" class="upload-button">
              <i class='bx bx-upload'></i> Upload File
              <input type="file" name="image" id="imageInput" class="custom-input" accept="image/*">
            </button>


            <img id="selectedImage" src="" alt="Selected Image"
              style="max-width: 750px; max-height: 500px; display: none;">
            <button type="submit" id="extractTextButton" style="display: none;" class="extract-button">Extract
              Text</button>

          </form>





          <div class="crop-container">
            <label for="cropImage" id="cropLabel" style="display: none;">Crop Image</label>
            <input type="checkbox" id="cropImage" name="cropImage" style="display: none; margin-right: 15px;" class="crop-checkbox">
          </div>

          <input type="hidden" id="croppedImageData" name="croppedImageData">
          <button id="doneButton" style="display: none;" class="done-button">Done</button>
          <button id="resetButton" style="display: none;" class="reset-button">Reset</button>
          <a id="downloadLink" download="cropped_image.jpg" style="display: none;" class="download-link"> Download</a>


          <img id="captured-image" style="display: none;">
          <button id="start-camera" class="custom-button3">Camera <i class='bx bx-camera'></i></button>
          <button id="capture-image" class="custom-button3" style="display: none;">Capture Image <i
              class='bx bx-camera'></i> </button>
          <button id="stop-camera" style="display: none;" class="custom-button3 custom-button-danger">Stop Camera <i
              class='bx bx-stop'></i></button>
          <video id="live-camera-feed" autoplay></video>



          <!-- Notification Message -->
          <notif>
            <% if (text) { %>
              <h2>Extracted Text:</h2>
              <pre><%= text %></pre>
              <% } %>


                <% if (successMessage) { %>
                  <div style="color: green; margin-top: 10px; text-align: center;">
                    <p style="color: green;">
                      <%= successMessage %>
                    </p>
                  </div>
                  <% } else { %>
                    <div style="color: red; margin-top: 10px; text-align: center;">
                      <p style="color: red;">
                        <%= errorMessage %>
                      </p>
                    </div>
                    <% } %>
          </notif>



        </div>
      </div>

    </div>
  </section>

  <script>
    let sidebar = document.querySelector(".sidebar");
    let sidebarBtn = document.querySelector(".sidebarBtn");
    sidebarBtn.onclick = function () {
      sidebar.classList.toggle("active");
      if (sidebar.classList.contains("active")) {
        sidebarBtn.classList.replace("bx-menu", "bx-menu-alt-right");
      } else
        sidebarBtn.classList.replace("bx-menu-alt-right", "bx-menu");
    }
  </script>


  <script>
    const liveCameraFeed = document.getElementById('live-camera-feed');
    const capturedImage = document.getElementById('captured-image');
    const startCameraButton = document.getElementById('start-camera');
    const captureImageButton = document.getElementById('capture-image');
    const stopCameraButton = document.getElementById('stop-camera');

    let videoStream;

    // Function to start the camera feed
    startCameraButton.addEventListener('click', async () => {
      try {
        videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
        liveCameraFeed.srcObject = videoStream;
        startCameraButton.style.display = 'none';
        captureImageButton.style.display = 'inline-block';
        stopCameraButton.style.display = 'inline-block';
      } catch (error) {
        console.error('Error accessing the camera:', error);
      }
    });

    // Function to stop the camera feed
    stopCameraButton.addEventListener('click', () => {
      if (videoStream) {
        videoStream.getTracks().forEach((track) => {
          track.stop();
        });
        liveCameraFeed.style.display = 'none';
        startCameraButton.style.display = 'inline-block';
        captureImageButton.style.display = 'none';
        stopCameraButton.style.display = 'none';
      }
    });

    // Function to capture an image
    captureImageButton.addEventListener('click', () => {
      const canvas = document.createElement('canvas');
      canvas.width = liveCameraFeed.videoWidth;
      canvas.height = liveCameraFeed.videoHeight;
      canvas.getContext('2d').drawImage(liveCameraFeed, 0, 0);
      capturedImage.src = canvas.toDataURL('image/png');
      capturedImage.style.display = 'block';
    });
  </script>

  <script>
    let cropper;

    function updateImageFeedback() {
      const fileInput = document.getElementById("imageInput");
      const selectedImage = document.getElementById("selectedImage");
      const cropLabel = document.getElementById("cropLabel");
      const cropCheckbox = document.getElementById("cropImage");
      const extractButton = document.getElementById("extractTextButton");
      const doneButton = document.getElementById("doneButton");
      const downloadLink = document.getElementById("downloadLink");
      const resetButton = document.getElementById("resetButton");

      if (fileInput.files.length > 0) {
        selectedImage.src = URL.createObjectURL(fileInput.files[0]);
        selectedImage.style.display = "block";
        cropLabel.style.display = "block";
        cropCheckbox.style.display = "block";
        resetButton.style.display = "block";

        if (cropCheckbox.checked) {
          extractButton.style.display = "none"; // Hide the "Extract Text" button when cropping
          doneButton.style.display = "block";
          resetButton.style.display = "block";
          downloadLink.style.display = "none";

          cropper = new Cropper(selectedImage, {
            aspectRatio: 2 / 1,
            viewMode: 2,
          });

          doneButton.addEventListener("click", () => {
            doneButton.style.display = "none";
            downloadLink.style.display = "block";
            extractButton.style.display = "block"; // Show the "Extract Text" button when cropping is done
          });
        } else {
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
          doneButton.style.display = "none";
          downloadLink.style.display = "none";
          extractButton.style.display = "block"; // Show the "Extract Text" button when not cropping
        }
      } else {
        selectedImage.src = "";
        selectedImage.style.display = "none";
        cropLabel.style.display = "none";
        cropCheckbox.style.display = "none";
        extractButton.style.display = "none";
        doneButton.style.display = "none";
        downloadLink.style.display = "none";
        resetButton.style.display = "none";
      }
    }

    document.getElementById("imageInput").addEventListener("change", () => {
      updateImageFeedback();
    });

    document.getElementById("cropImage").addEventListener("change", () => {
      updateImageFeedback();
    });

    document.getElementById("doneButton").addEventListener("click", () => {
      if (cropper) {
        const croppedCanvas = cropper.getCroppedCanvas();
        const downloadLink = document.getElementById("downloadLink");
        downloadLink.href = croppedCanvas.toDataURL("image/jpeg");
        downloadLink.style.display = "block";
      }
    });
    document.getElementById("resetButton").addEventListener("click", () => {
      const fileInput = document.getElementById("imageInput");
      fileInput.value = ""; // Clear the file input
      updateImageFeedback();
    });



  </script>



  <style>
    .crop-container {
      display: flex;
      flex-direction: row;
      align-items: center;
      background: #3498db;
      margin-top: 10px;
      border-radius: 5px;
      width: fit-content;
    }

    #cropLabel {
      color: #fff;
      padding: 10px 15px;
    }

    .extract-button,
    .reset-button,
    .done-button {
      display: inline-block;
      padding: 10px 15px;
      margin-top: 10px;
      background-color: #3498db;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      text-align: center;
    }

    .extract-button:hover,
    .reset-button:hover,
    .done-button:hover {
      background-color: #2980b9;
    }

    .reset-button {
      background-color: #e74c3c;
    }

    .reset-button:hover {
      background-color: #c0392b;
    }

    .download-link {
      display: inline-block;
      padding: 10px 15px;
      margin-top: 10px;
      background-color: #2ecc71;
      color: #fff;
      text-decoration: none;
      border-radius: 5px;
      cursor: pointer;
      width: fit-content;
    }

    .download-link:hover {
      background-color: #27ae60;
    }

    form {
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }



    img {
      max-width: 100%;
      max-height: 300px;
      margin: 20px 0;
      border: 1px solid #ccc;
      border-radius: 5px;
    }



    notif {
      text-align: center;
      margin-top: 20px;
    }



    pre {
      background-color: #e6e6e6;
      padding: 10px;
      border-radius: 5px;
      overflow: auto;
    }

    header {
      display: flex;
      flex-direction: column;
      justify-content: space-evenly;
      align-items: center;
    }

    .upload-button {
      position: relative;
      padding: 11px 16px;
      font-size: 15px;
      line-height: 1.5;
      border-radius: 3px;
      color: #fff;
      background-color: #4CAF50;
      border: 0;
      transition: 0.2s;
      overflow: hidden;
      margin-bottom: 10px;
    }

    .upload-button input[type="file"] {
      cursor: pointer;
      position: absolute;
      left: 0%;
      top: 0%;
      transform: scale(3);
      opacity: 0;
    }

    .upload-button:hover {
      background-color: #45A049;
    }
  </style>


</body>

</html>